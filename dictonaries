import math
import cmath
import datetime
from math import sqrt
import random
from collections import Counter

#Dictionaries Challenge 21: Thesaurus App

# thesaurus = {
#     'hot':['balmy','summery','tropical','boiling','scorching'],
#     'cold':['chilly','cool','freezing','frigid','polar'],
#     'happy':['content','cheery','merry','jovial','jocular'],
#     'sad':['unhappy','downcast','miserable','glum','melnacholy']
#
# }
# print("Welcome to the Thesaurus App")
#
# print("\n\n Choose a word from the thesaurus and I will give you a synonym.")
# print("\nHere are the words in the thesaurus: ")
# for key in thesaurus.keys():
#     print("\t-"+key)
# word = input("What word would you like a synonym for: ").lower()
#
# value1 = thesaurus[word]
# random_value = random.choice(value1)
# print("A synonym for "+str(word)+" is "+str(random_value))
#
# whole_dict = input("Would you like to see the whole thesaurus (yes/no): ").lower()
# if whole_dict == "yes":
#     for key,value in thesaurus.items():
#         print("\n"+str(key).title()+" synonyms are: ")
#         print("\t-"+str(value))
        # for x in value:
        #     print("\t- "+str(x))
# elif whole_dict=="no":
#     print("\nI hope you enjoyed the program. Thank you!")
# else:
#     print("You've type sth wrong man... Let's bail bustard!")

#Dictionaries Challenge 22: Database Admin Program

# print("Welcome to the Database Admin Program")
#
# log_on_information = {
#     'admin00':'Rafalq25',
#     'admin2':'Ravix12345',
#     'admin3':'Polska123',
#     'admin4':'Kolega123',
#     'admin5':'OranyStary'
# }
#
# print(log_on_information.keys())
# print(log_on_information.values())
# for x in log_on_information.items():
#     print(x)
# First Output
# username = input("Enter your username: ")
# correct_password = log_on_information[username]
# if username in log_on_information and username=="admin00":
#     password = input("Enter your password: ")
#     if password == correct_password:
#         for x,y in log_on_information.items():
#             print("Username: "+str(x)+"\t\tPassword: "+str(y))
#
#
#
# Second,Third,Fourth and Five Output
# elif username in log_on_information:
#     password = input("Enter your password: ")
#     if password == correct_password:
#         print("\nHello "+str(username)+"! You are logged in. ")
#         change_passwd = input("would you like to change your password: ").lower()
#         if change_passwd=="yes":
#             changed_password = input("What would you like your new password to be: ")
#             if len(changed_password) <8:
#                 print("Your password is too short!")
#             elif len(changed_password) >=8:
#                 print("\n" +str(username)+"your password is "+str(changed_password))
#         else:
#             print("Okey, so that's all :D")
#
#     else:
#         print("Your password is wrong, i think you are not the person , \nwho you say that you are... that's why fuck off!!!!")
# else:
#     print("Your not in database, sorry and bye!")



#Dictionaries Challenge 23: Yes or No Polling App

# print("Welcome to the Yes or No Issue Polling App")
#
# issue = input("\nWhat is the yes or no issue you will be voting on today: ")
# votes = int(input("What is the number of voters you will allow on the issue: "))
# password = input("Enter a password for polling results: ")
#
# vot_yes = 0
# vot_no = 0
# voters_of_pool = {
#
# }
#
# for x in range(1,votes+1):
#     full_name = input("\nWhat is your full name: ").title()
#     if full_name in voters_of_pool.keys():
#         print("You have already voted, you cannot vote again")
#     else:
#         print(issue)
#         result = input("Here type in you vote (yes/no): ").lower()
#         if result == "yes" or  result.startswith("y"):
#             result = "yes"
#             vot_yes +=1
#             print("Thank you "+str(full_name)+"! Your vote has been recorded")
#         elif result == "no" or result.startswith("n"):
#             result="no"
#             vot_no +=1
#             print("Thank you " + str(full_name) + "! Your vote has been recorded")
#         else:
#             print("Hmmm, are you sure this answer is correct "+str(result))
#     voters_of_pool[full_name] = result
# print("\nhe following "+str(votes)+" people voted.")
# for x in voters_of_pool.keys():
#          print(x)
#
# print("\nOn the following issue: "+issue)
#
# if vot_yes > vot_no:
#     print("Yes wins! "+str(vot_yes)+ " to "+str(vot_no)+".")
#
# elif vot_no > vot_yes:
#     print("Oh no, lose! "+str(vot_no)+" to "+str(vot_yes))
# else:
#     print("It looks like a draw... oh maaan")
#
# see_result = input("To see the voting results enter the admin password: ")
# if see_result == password:
#     for key, value in voters_of_pool.items():
#         print("Voter: "+key +"\t\t Vote:"+value)
# else:
#     print("I guess, somebody don't remember password...  ;)")
#
# print("\nThanks for using our App, I hope you like it. :)")

#Dictionaries Challenge 224: Frequency Analysis App

# print("Welcome to the Frequency Analysis App")
#
# non_letters = ['1','2','3','4','5','6','7','8','9','0',' ',
# '.','?','!',',','"',"'",':',';','(',')','%','$','&','#','\n','\t']
# getting key_phrase_1
# key_phrase_1 = """To Sherlock Holmes she is always the woman. I have seldom heard him mention her under any other name. In his eyes she eclipses and predominates the whole of her sex. It was not that he felt any emotion akin to love for Irene Adler. All emotions, and that one particularly, were abhorrent to his cold, precise but admirably balanced mind.He was, I take it, the most perfect reasoning and observing machine that the world has seen, but as a lover he would have placed himself in a false position. He never spoke of the softer passions, save with a gibe and a sneer. They were admirable things for the observer excellent for drawing the veil from men's motives
# and actions.
# But for the trained reasoner to admit such intrusions into his own delicate and finely adjusted
#
# temperament was to introduce
# a distracting factor which might throw a doubt upon all his mental results.
# Grit in a sensitive instrument, or a crack in one of his own highpower lenses,
# would not be more disturbing than a strong emotion in a nature such as his.
# And yet there was but one woman to him, and that woman was the late Irene Adler, of dubious
# and questionable memory.
# I had seen little of Holmes lately. My marriage had drifted us away from each other.
# My own complete happiness, and the homecentred interests which rise up around the man who
# first finds himself master of his own establishment,
# were sufficient to absorb all my attention, while Holmes, who loathed every form of society with
# his whole Bohemian soul,
# remained in our lodgings in Baker Street, buried among his old books, and alternating from
# week to week between cocaine and ambition,
# the drowsiness of the drug, and the fierce energy of his own keen nature.
# He was still, as ever, deeply attracted by the study of crime,
# Page 89
# and occupied his immense faculties and extraordinary powers of observation in following out
# those clues,
# and clearing up those mysteries which had been abandoned as hopeless by the official police.
# From time to time I heard some vague account of his doings: of his summons to Odessa in the
# case of the Trepoff murder,
# of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee,
# and finally of the mission which he had accomplished so delicately and successfully for the
# reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the
# daily press, I knew little of my former friend and companion""".lower()
#
# number_letters = len(key_phrase_1)
# for n in range(1,number_letters):
#     new_change = key_phrase_1.replace(" ","",n)
#
# for m in new_change:
#     if m in non_letters:
#         new_change = new_change.replace(m, "",n)
#
# total_occurrences = len(new_change)
# letter_count =  Counter(new_change)
#
# sum_up = sum(letter_count.values())
#
# print("\n\nHere is the frequency analysis from key phrase 1: ")
# print("\n\t\t Letter \t\t\tOccurrence \t\t\t Percentege: ")
# for x, y in sorted(letter_count.items()):
#     ret1 = round(float(y / sum_up * 100), 2)
#     print("\t\t\t" + str(x)+"\t\t\t\t\t"+str(y) + "\t\t\t\t\t\t"+str(ret1)+"%")
# print("Letters ordered from highest occurence to lowest: ")
# order_letter_count = letter_count.most_common()
# g = dict(order_letter_count)
# key_phrase_1_ordered_letters = []
# for x in g.keys():
#     print(x,end="")
#
# key_phrase_2 = """ Quite so! You have not observed. And yet you have seen.
# That is just my point. Now, I know that there are seventeen steps, because I have both seen
# and observed.
# By the way, since you are interested in these little problems,
# and since you are good enough to chronicle one or two of my trifling experiences, you may be
# interested in this.
# He threw over a sheet of thick, pink tinted notepaper which had been lying open upon the table.
# It came by the last post, said he. Read it aloud.
# The note was undated, and without either signature or address.
# There will call upon you tonight, at a quarter to eight o'clock,
# it said, "a gentleman who desires to consult you upon a matter of the very deepest moment.
# Your recent services to one of the royal houses of Europe have shown that you are one who
# may safely be trusted
# with matters which are of an importance which can hardly be exaggerated.
# This account of you we have from all quarters received.
# Be in your chamber then at that hour, and do not take it amiss if your visitor wear a mask.
# This is indeed a mystery, I remarked. What do you imagine that it means?
# I have no data yet. It is a capital mistake to theorise before one has data.
# Insensibly one begins to twist facts to suit theories, instead of theories to suit facts.
# But the note itself. What do you deduce from it?
# I carefully examined the writing, and the paper upon which it was written.
# The man who wrote it was presumably well to do, I remarked, endeavouring to imitate my
# companion's processes.
# Such paper could not be bought under half a crown a packet.
# It is peculiarly strong and stiff.""".lower()
# number_letters = len(key_phrase_2)
# for n in range(1,number_letters):
#     new_change = key_phrase_2.replace(" ","",n)
# for m in new_change:
#     if m in non_letters:
#         new_change = new_change.replace(m, "",n)
# total_occurrences = len(new_change)
# letter_count =  Counter(new_change)
# sum_up = sum(letter_count.values())
# print("\n\nHere is the frequency analysis from key phrase 2: ")
# print("\n\t\t Letter \t\t\tOccurrence \t\t\t Percentege: ")
# for x, y in sorted(letter_count.items()):
#     ret1 = round(float(y / sum_up * 100), 2)
#     print("\t\t\t" + str(x)+"\t\t\t\t\t"+str(y) + "\t\t\t\t\t\t"+str(ret1)+"%")
# print("Letters ordered from highest occurence to lowest: ")
# order_letter_count = letter_count.most_common()
# g = dict(order_letter_count)
# key_phrase_2_ordered_letters = []
# for x in g.keys():
#     print(x,end="")
#

 # Directory challenge: Code Breaker App
#
# print("Welcome in Code Breaker App")
#
# print("Welcome to the Frequency Analysis App")
#
# non_letters = ['1','2','3','4','5','6','7','8','9','0',' ',
# '.','?','!',',','"',"'",':',';','(',')','%','$','&','#','\n','\t']
# getting key_phrase_1
# key_phrase_1 = """To Sherlock Holmes she is always the woman. I have seldom heard him mention her under any other name. In his eyes she eclipses and predominates the whole of her sex. It was not that he felt any emotion akin to love for Irene Adler. All emotions, and that one particularly, were abhorrent to his cold, precise but admirably balanced mind.He was, I take it, the most perfect reasoning and observing machine that the world has seen, but as a lover he would have placed himself in a false position. He never spoke of the softer passions, save with a gibe and a sneer. They were admirable things for the observer excellent for drawing the veil from men's motives
# and actions.
# But for the trained reasoner to admit such intrusions into his own delicate and finely adjusted
#
# temperament was to introduce
# a distracting factor which might throw a doubt upon all his mental results.
# Grit in a sensitive instrument, or a crack in one of his own highpower lenses,
# would not be more disturbing than a strong emotion in a nature such as his.
# And yet there was but one woman to him, and that woman was the late Irene Adler, of dubious
# and questionable memory.
# I had seen little of Holmes lately. My marriage had drifted us away from each other.
# My own complete happiness, and the homecentred interests which rise up around the man who
# first finds himself master of his own establishment,
# were sufficient to absorb all my attention, while Holmes, who loathed every form of society with
# his whole Bohemian soul,
# remained in our lodgings in Baker Street, buried among his old books, and alternating from
# week to week between cocaine and ambition,
# the drowsiness of the drug, and the fierce energy of his own keen nature.
# He was still, as ever, deeply attracted by the study of crime,
# Page 89
# and occupied his immense faculties and extraordinary powers of observation in following out
# those clues,
# and clearing up those mysteries which had been abandoned as hopeless by the official police.
# From time to time I heard some vague account of his doings: of his summons to Odessa in the
# case of the Trepoff murder,
# of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee,
# and finally of the mission which he had accomplished so delicately and successfully for the
# reigning family of Holland. Beyond these signs of his activity, however, which I merely shared with all the readers of the
# daily press, I knew little of my former friend and companion""".lower()
# key_phrase_1 = input("What would you like to write?")
#
#
#
# number_letters = len(key_phrase_1)
# for n in range(1,number_letters):
#     new_change = key_phrase_1.replace(" ","",n)
#
# for m in new_change:
#     if m in non_letters:
#         new_change = new_change.replace(m, "",n)
#
# total_occurrences = len(new_change)
# letter_count =  Counter(new_change)
#
# sum_up = sum(letter_count.values())
#
# print("\n\nHere is the frequency analysis from key phrase 1: ")
# print("\n\t\t Letter \t\t\tOccurrence \t\t\t Percentege: ")
# for x, y in sorted(letter_count.items()):
#     ret1 = round(float(y / sum_up * 100), 2)
#     print("\t\t\t" + str(x)+"\t\t\t\t\t"+str(y) + "\t\t\t\t\t\t"+str(ret1)+"%")
# print("Letters ordered from highest occurence to lowest: ")
# order_letter_count = letter_count.most_common()
# g = dict(order_letter_count)
# key_phrase_1_ordered_letters = []
# for x in g.keys():
#     print(x,end="")
#
#
# key_phrase_2 = input("What would you like to type: ")
#
#
# key_phrase_2 = """ Quite so! You have not observed. And yet you have seen.
# That is just my point. Now, I know that there are seventeen steps, because I have both seen
# and observed.
# By the way, since you are interested in these little problems,
# and since you are good enough to chronicle one or two of my trifling experiences, you may be
# interested in this.
# He threw over a sheet of thick, pink tinted notepaper which had been lying open upon the table.
# It came by the last post, said he. Read it aloud.
# The note was undated, and without either signature or address.
# There will call upon you tonight, at a quarter to eight o'clock,
# it said, "a gentleman who desires to consult you upon a matter of the very deepest moment.
# Your recent services to one of the royal houses of Europe have shown that you are one who
# may safely be trusted
# with matters which are of an importance which can hardly be exaggerated.
# This account of you we have from all quarters received.
# Be in your chamber then at that hour, and do not take it amiss if your visitor wear a mask.
# This is indeed a mystery, I remarked. What do you imagine that it means?
# I have no data yet. It is a capital mistake to theorise before one has data.
# Insensibly one begins to twist facts to suit theories, instead of theories to suit facts.
# But the note itself. What do you deduce from it?
# I carefully examined the writing, and the paper upon which it was written.
# The man who wrote it was presumably well to do, I remarked, endeavouring to imitate my
# companion's processes.
# Such paper could not be bought under half a crown a packet.
# It is peculiarly strong and stiff.""".lower()
# number_letters = len(key_phrase_2)
# for n in range(1,number_letters):
#     new_change = key_phrase_2.replace(" ","",n)
# for m in new_change:
#     if m in non_letters:
#         new_change = new_change.replace(m, "",n)
# total_occurrences = len(new_change)
# letter_count =  Counter(new_change)
# sum_up = sum(letter_count.values())
# print("\n\nHere is the frequency analysis from key phrase 2: ")
# print("\n\t\t Letter \t\t\tOccurrence \t\t\t Percentege: ")
# for x, y in sorted(letter_count.items()):
#     ret1 = round(float(y / sum_up * 100), 2)
#     print("\t\t\t" + str(x)+"\t\t\t\t\t"+str(y) + "\t\t\t\t\t\t"+str(ret1)+"%")
# print("Letters ordered from highest occurence to lowest: ")
# order_letter_count = letter_count.most_common()
# g = dict(order_letter_count)
# key_phrase_2_ordered_letters = []
# for x in g.keys():
#     print(x,end="")
# decision = input("\nWould you like to encode or decode: ").lower()
# message = input("\nWhat is phrase the message:  ").lower() #wpisujemy wiadomość
# long = len(message) #mamy długość wiadomości
# for a in range(1,long+1):
#     var1 = message.replace(" ", "",a) #ta pętla nam usuwa białe znaki czyli spacje
# for h in var1:
#     if h in non_letters:
#         var1 = var1.replace(h, "", a) #ta powinna nam usuwać znaki spececjalne które mamy w liście
#
# total_occurrences2 = len(var1) #długość naszego CZYSTEGO NAPISU
# letter_count2 = Counter(var1) #magiczna sztuczka
# order_letter_count2 = letter_count2.most_common()
# print(order_letter_count2)
# o = dict(order_letter_count2)
# print(o)
# praphes_to_encode = []
# if decision.startswith("e"):
#     print("\nOkey lets's encode this message...")
#     print("\nThe encoded message is: ")
#     for xd in o.keys():
#         print(xd,end="")
# elif decision.startswith("d"):
#     print("You realy want to decode this script?")
#     decoded_phrase = []
#     for text in message:
#         indeks = key_phrase_1_ordered_letters.index(text)
#         decoded_phrase.append(indeks)
#     print(decoded_phrase)
#
#
#
# else:
#     print("You must wrote something wrong...")
#  przykład wiadomości do odkodowania:    apolskzgrnic
# Dictionaries Challenge 24: Frequency Analysis App

# print("Welcome to Frequency Analysis App")
#
# non_letters = ["'",'    ','1','2','3','4','5','6','7','8','9','!',"@","#",'$','%','^',"&","*",'(',')',"-",'_',' ','=','+','[','{',']','}','|',':',':',',','<','.','>','/','?','~`']
#
# key_phrase_1 = input("What a phrase would you like to type: ?").lower().strip()
#Cleaning a phrase with non letter and white characters
# for non_letters in non_letters:
#     key_phrase_1 = key_phrase_1.replace(non_letters, "")

#load the length
# total_occurences = len(key_phrase_1)

#creating COUNTER - something like a dictionary it means every one key is letter and value is number
# letter_count = Counter(key_phrase_1)

#pre-sentence
# print("\nHere is the frequency analysis from key phrase 1: ")

#Creating a picteresque table
# print("\n\tLetter"+"\t\t\tOccurrence"+"\t\t\tPercentage")
# for key, value in sorted(letter_count.items()):
#     percentage = round(float(value/total_occurences*100),2)
#     print("\t"+str(key) + "\t\t\t\t" +str(value)+"\t\t\t\t\t"+str(percentage)+"%")

#order the letters from highest to lowers occurrence HERE we have a type list and in this list we have occurrences connected with each of the letter
# ordered_letter_count = letter_count.most_common()
#
# key_phrase_1_ordered_letters = []
#
# print("\nLetters ordered from highest occurrence to lowest ")
# for pair in ordered_letter_count:
#     key_phrase_1_ordered_letters.append(pair[0])
# for letter in key_phrase_1_ordered_letters:
#     print(letter, end="")
#
# non_letters = ["'",'    ','1','2','3','4','5','6','7','8','9','!',"@","#",'$','%','^',"&","*",'(',')',"-",'_',' ','=','+','[','{',']','}','|',':',':',',','<','.','>','/','?','~`']

# key_phrase_2 = input("What a phrase would you like to type: ?").lower().strip()
# Cleaning a phrase with non letter and white characters
# for non_letters in non_letters:
#     key_phrase_2 = key_phrase_2.replace(non_letters, "")
#
#load the length
# total_occurences = len(key_phrase_2)

#creating COUNTER - something like a dictionary it means every one key is letter and value is number
# letter_count = Counter(key_phrase_2)
#
# pre-sentence
# print("\nHere is the frequency analysis from key phrase 1: ")

#Creating a picteresque table
# print("\n\tLetter"+"\t\t\tOccurrence"+"\t\t\tPercentage")
# for key, value in sorted(letter_count.items()):
#     percentage = round(float(value/total_occurences*100),2)
#     print("\t"+str(key) + "\t\t\t\t" +str(value)+"\t\t\t\t\t"+str(percentage)+"%")

#order the letters from highest to lowers occurrence HERE we have a type list and in this list we have occurrences connected with each of the letter
# ordered_letter_count = letter_count.most_common()
#
# key_phrase_2_ordered_letters = []
#
# print("\nLetters ordered from highest occurrence to lowest ")
# for pair in ordered_letter_count:
#     key_phrase_2_ordered_letters.append(pair[0])
# for letter in key_phrase_1_ordered_letters:
#     print(letter, end="")
#
#

# Dictionaries Challenge 25: Code breaker App

key_phrase_1 = """
To Sherlock Holmes she is always the woman. I have seldom heard him mention her under any
other name.
In his eyes she eclipses and predominates the whole of her sex. It was not that he felt any
emotion akin to love for Irene Adler.
All emotions, and that one particularly, were abhorrent to his cold, precise but admirably
balanced mind.
He was, I take it, the most perfect reasoning and observing machine that the world has seen,
but as a lover he would have placed himself in a false position.
He never spoke of the softer passions, save with a gibe and a sneer.
They were admirable things for the observer excellent for drawing the veil from men's motives
and actions.
But for the trained reasoner to admit such intrusions into his own delicate and finely adjusted
temperament was to introduce
a distracting factor which might throw a doubt upon all his mental results.
Grit in a sensitive instrument, or a crack in one of his own highpower lenses,
would not be more disturbing than a strong emotion in a nature such as his.
And yet there was but one woman to him, and that woman was the late Irene Adler, of dubious
and questionable memory.
I had seen little of Holmes lately. My marriage had drifted us away from each other.
My own complete happiness, and the homecentred interests which rise up around the man who
first finds himself master of his own establishment,
were sufficient to absorb all my attention, while Holmes, who loathed every form of society with
his whole Bohemian soul,
remained in our lodgings in Baker Street, buried among his old books, and alternating from
week to week between cocaine and ambition,
the drowsiness of the drug, and the fierce energy of his own keen nature.
He was still, as ever, deeply attracted by the study of crime,
Page 89 
and occupied his immense faculties and extraordinary powers of observation in following out
those clues,
and clearing up those mysteries which had been abandoned as hopeless by the official police.
From time to time I heard some vague account of his doings: of his summons to Odessa in the
case of the Trepoff murder,
of his clearing up of the singular tragedy of the Atkinson brothers at Trincomalee,
and finally of the mission which he had accomplished so delicately and successfully for the
reigning family of Holland.
Beyond these signs of his activity, however, which I merely shared with all the readers of the
daily press, I knew little of my former friend and companion.
"""
print("Welcome to Code breaker App")

non_letters = ["'",'    ','1','2','3','4','5','6','7','8','9','!',"@","#",'$','%','^',"&","*",'(',')',"-",'_',' ','=','+','[','{',']','}','|',':',':',',','<','.','>','/','?','~`']

# Cleaning a phrase with non letter and white characters
for non_letters in non_letters:
    key_phrase_1 = key_phrase_1.replace(non_letters, "")

# load the length
total_occurences = len(key_phrase_1)

# creating COUNTER - something like a dictionary it means every one key is letter and value is number
letter_count = Counter(key_phrase_1)

# pre-sentence
print("\nHere is the frequency analysis from key phrase 1: ")

# Creating a picteresque table
print("\n\tLetter"+"\t\t\tOccurrence"+"\t\t\tPercentage")
for key, value in sorted(letter_count.items()):
    percentage = round(float(value/total_occurences*100),2)
    print("\t"+str(key) + "\t\t\t\t" +str(value)+"\t\t\t\t\t"+str(percentage)+"%")

# order the letters from highest to lowers occurrence HERE we have a type list and in this list we have occurrences connected with each of the letter
ordered_letter_count = letter_count.most_common()

key_phrase_1_ordered_letters = []

print("\nLetters ordered from highest occurrence to lowest ")
for pair in ordered_letter_count:
    key_phrase_1_ordered_letters.append(pair[0])
for letter in key_phrase_1_ordered_letters:
    print(letter, end="")


print("Welcome to Code breaker App")

non_letters = [' ', "'", '    ' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '!' , "@" , "#" , '$' , '%' , '^' , "&" , "*" , '(' , ')' , "-" , '_' , ' ' , '=' , '+' , '[' , '{' , ']' , '}' , '|' , ':' , ':' , ',' , '<' , '.' , '>' , '/' , '?' , '~`']

key_phrase_2 = """
Quite so! You have not observed. And yet you have seen.
That is just my point. Now, I know that there are seventeen steps, because I have both seen
and observed.
By the way, since you are interested in these little problems,
and since you are good enough to chronicle one or two of my trifling experiences, you may be
interested in this.
He threw over a sheet of thick, pink tinted notepaper which had been lying open upon the table.
It came by the last post, said he. Read it aloud.
The note was undated, and without either signature or address.
There will call upon you tonight, at a quarter to eight o'clock,
it said, "a gentleman who desires to consult you upon a matter of the very deepest moment.
Your recent services to one of the royal houses of Europe have shown that you are one who
may safely be trusted
with matters which are of an importance which can hardly be exaggerated.
This account of you we have from all quarters received.
Be in your chamber then at that hour, and do not take it amiss if your visitor wear a mask.
This is indeed a mystery, I remarked. What do you imagine that it means?
I have no data yet. It is a capital mistake to theorise before one has data.
Insensibly one begins to twist facts to suit theories, instead of theories to suit facts.
But the note itself. What do you deduce from it?
I carefully examined the writing, and the paper upon which it was written.
The man who wrote it was presumably well to do, I remarked, endeavouring to imitate my
companion's processes.
Such paper could not be bought under half a crown a packet.
It is peculiarly strong and stiff.
"""

# Cleaning a phrase with non letter and white characters
for non_letters in non_letters:
    key_phrase_2 = key_phrase_2.replace(non_letters, "")

# load the length
total_occurences = len(key_phrase_2)

# creating COUNTER - something like a dictionary it means every one key is letter and value is number
letter_count = Counter(key_phrase_2)

# pre-sentence
print("\nHere is the frequency analysis from key phrase 1: ")

# Creating a picteresque table
print("\n\tLetter"+"\t\t\tOccurrence"+"\t\t\tPercentage")
for key, value in sorted(letter_count.items()):
    percentage = round(float(value/total_occurences*100),2)
    print("\t"+str(key) + "\t\t\t\t" +str(value)+"\t\t\t\t\t"+str(percentage)+"%")

# order the letters from highest to lowers occurrence HERE we have a type list and in this list we have occurrences connected with each of the letter
ordered_letter_count = letter_count.most_common()

key_phrase_2_ordered_letters = []

print("\nLetters ordered from highest occurrence to lowest ")
for pair in ordered_letter_count:
    key_phrase_2_ordered_letters.append(pair[0])
for letter in key_phrase_2_ordered_letters:
    print(letter, end="")


coding = input("\nHey man, would you like to encode or decode some phrase: ?").lower()
phrase = input("\nWhat type of phrase would you like to decode or encode: ").lower()

for non_letters in non_letters:
    phrase = phrase.replace(non_letters, '')


if coding.startswith("e"):
    print("let's start")
    encoded_phrase = []
    for letter in phrase:
        index = key_phrase_1_ordered_letters.index(letter)
        letter = key_phrase_2_ordered_letters[index]
        encoded_phrase.append(letter)
    print("The encode message is: ")
    for letter in encoded_phrase:
        print(letter , end=" ")

elif coding.startswith("d"):
    print("let's decode this messege ")
    decoded_phrase = []
    for letter in phrase:
        index = key_phrase_2_ordered_letters.index(letter)
        letter = key_phrase_1_ordered_letters[index]
        decoded_phrase.append(letter)
    print("The decode message is")
    for letter in decoded_phrase:
        print(letter, end="")



